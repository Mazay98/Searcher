<?php

namespace Tests;

use PHPUnit\Framework\TestCase;
use Searcher\Search;

class SearchTest extends TestCase {
    private $file;

    protected function setUp():void {
        $text = "текст рыба в котором нет смысла";

        $path_file = "./tests/TestFiles/file.txt";
        $f = fopen($path_file, "w");
        fwrite($f,$text);
        $this->file = $path_file;
        fclose($f);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    function testGetFileType() {
        $file_type = Search::getFileType($this->file);
        $this->assertEquals($file_type, 'txt');
    }

    function testSearchSuccess() {
        $searcher = new Search();
        $result = $searcher->search($this->file, 'рыба');

        $this->assertEquals($result[0]['string'], 1);
        $this->assertEquals($result[0]['positions'], 7);
    }

    function testSearchMultiWords() {
        $f = fopen($this->file,'a+');
        $text = 'купил я сегодня собаку
        собаку купил сегодня я, купил я собаку сегодня';
        fwrite($f, $text);
        fclose($f);
        $needle = 'собаку';

        $searcher = new Search();
        $result = $searcher->search($this->file, $needle);
        $this->assertEquals($result[0]['string'], 1);
        $this->assertEquals([$result[1]['string'], count($result[1]['positions'])], [2, 2]);
    }

    function testSearchEmpty() {
        $searcher = new Search();
        $result = $searcher->search($this->file, '');

        $this->assertEquals($result, 'NEEDLE_TEXT[not_found]');
    }

    function testErrorFileExist (){
        $searcher = new Search();
        $result = $searcher->search('', 'ali');

        $this->assertEquals($result, 'FILE[not_exist]');
    }

    function testTextNotСontainNeedle (){
        $searcher = new Search();
        $result = $searcher->search($this->file, 'ali');

        $this->assertEquals($result, []);
    }
}